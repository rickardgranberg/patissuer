# This GitHub action can publish assets for release when a tag is created.
# Currently its setup to run on any tag that matches the pattern "v*" (ie. v0.1.0).
#
# This uses an action (paultyng/ghaction-import-gpg) that assumes you set your 
# private key in the `GPG_PRIVATE_KEY` secret and passphrase in the `PASSPHRASE`
# secret. If you would rather own your own GPG handling, please fork this action
# or use an alternative one for key handling.
#
# You will need to pass the `--batch` flag to `gpg` in your signing step 
# in `goreleaser` to indicate this is being used in a non-interactive mode.
#
name: Release
on:
  push:
    tags:
      - 'v*'
permissions:
  contents: read
  packages: write
jobs:
  dc:
    name: Build DC
    runs-on: ubuntu-latest
    timeout-minutes: 6
    env:
      dc_name: ${{ vars.DOCKER_REGISTRY }}/${{ github.repository }}-dc
    outputs:
      dc_image: '${{ env.dc_name }}:${{ github.run_number }}'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ vars.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Prebuild DevContainer
      uses: devcontainers/ci@v0.3
      with:    
        imageName: ${{ env.dc_name }}
        cacheFrom: ${{ env.dc_name }}:latest
        imageTag: ${{ github.run_number }},latest
        push: always
  goreleaser:
    runs-on: ubuntu-latest
    needs: dc
    container: 
      image: ${{ needs.dc.outputs.dc_image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Fix ownership
        run: |
          who=$(whoami)
          chown -R ${who}:${who} ${GITHUB_WORKSPACE}
      - name: Unshallow
        run: git fetch --prune --unshallow
      - name: Get Tools
        run: mage toolInstall
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          # These secrets will need to be configured for the repository:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --clean
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          # GitHub sets this automatically
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
